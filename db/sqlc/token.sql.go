// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: token.sql

package db

import (
	"context"
	"database/sql"
)

const createToken = `-- name: CreateToken :execresult
INSERT INTO tbl_user_token (
  user_name,
  user_token,
  expire_at
) VALUES (
 ?,?,?
)
`

type CreateTokenParams struct {
	UserName  string
	UserToken string
	ExpireAt  sql.NullTime
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createToken, arg.UserName, arg.UserToken, arg.ExpireAt)
}

const getToken = `-- name: GetToken :one
SELECT id, user_name, user_token, expire_at FROM tbl_user_token
WHERE user_name = ? LIMIT 1
`

func (q *Queries) GetToken(ctx context.Context, userName string) (TblUserToken, error) {
	row := q.db.QueryRowContext(ctx, getToken, userName)
	var i TblUserToken
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserToken,
		&i.ExpireAt,
	)
	return i, err
}
