// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: file.sql

package db

import (
	"context"
	"database/sql"
)

const createFile = `-- name: CreateFile :execresult
INSERT INTO tbl_file (
    file_sha1,
    file_name,
    file_size,
    file_addr,
    create_at,
    update_at,
    status
) VALUES (
  ?,?,?,?,?,?,?
)
`

type CreateFileParams struct {
	FileSha1 string
	FileName string
	FileSize sql.NullInt64
	FileAddr string
	CreateAt sql.NullTime
	UpdateAt sql.NullTime
	Status   int32
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFile,
		arg.FileSha1,
		arg.FileName,
		arg.FileSize,
		arg.FileAddr,
		arg.CreateAt,
		arg.UpdateAt,
		arg.Status,
	)
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM tbl_file
WHERE file_sha1 = ?
`

func (q *Queries) DeleteFile(ctx context.Context, fileSha1 string) error {
	_, err := q.db.ExecContext(ctx, deleteFile, fileSha1)
	return err
}

const getFile = `-- name: GetFile :one
SELECT id, file_sha1, file_name, file_size, file_addr, create_at, update_at, status, ext1, ext2 FROM tbl_file
WHERE file_sha1 = ? LIMIT 1
`

func (q *Queries) GetFile(ctx context.Context, fileSha1 string) (TblFile, error) {
	row := q.db.QueryRowContext(ctx, getFile, fileSha1)
	var i TblFile
	err := row.Scan(
		&i.ID,
		&i.FileSha1,
		&i.FileName,
		&i.FileSize,
		&i.FileAddr,
		&i.CreateAt,
		&i.UpdateAt,
		&i.Status,
		&i.Ext1,
		&i.Ext2,
	)
	return i, err
}

const updateFile = `-- name: UpdateFile :exec
update tbl_file 
SET file_name = ?
WHERE file_sha1 = ?
`

type UpdateFileParams struct {
	FileName string
	FileSha1 string
}

func (q *Queries) UpdateFile(ctx context.Context, arg UpdateFileParams) error {
	_, err := q.db.ExecContext(ctx, updateFile, arg.FileName, arg.FileSha1)
	return err
}

const updateFileLocation = `-- name: UpdateFileLocation :exec
update tbl_file 
SET file_addr = ?
WHERE file_sha1 = ?
`

type UpdateFileLocationParams struct {
	FileAddr string
	FileSha1 string
}

func (q *Queries) UpdateFileLocation(ctx context.Context, arg UpdateFileLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateFileLocation, arg.FileAddr, arg.FileSha1)
	return err
}
