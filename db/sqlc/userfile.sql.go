// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: userfile.sql

package db

import (
	"context"
	"database/sql"
)

const createUserFile = `-- name: CreateUserFile :execresult
INSERT INTO tbl_user_file (
  user_name,
  file_sha1,
  file_size,
  file_name,
  upload_at,
  last_update,
  status
) VALUES (
  ?,?,?,?,?,?,?
)
`

type CreateUserFileParams struct {
	UserName   string
	FileSha1   string
	FileSize   sql.NullInt64
	FileName   string
	UploadAt   sql.NullTime
	LastUpdate sql.NullTime
	Status     int32
}

func (q *Queries) CreateUserFile(ctx context.Context, arg CreateUserFileParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserFile,
		arg.UserName,
		arg.FileSha1,
		arg.FileSize,
		arg.FileName,
		arg.UploadAt,
		arg.LastUpdate,
		arg.Status,
	)
}

const getUserFileMeteList = `-- name: GetUserFileMeteList :many
SELECT id, user_name, file_sha1, file_size, file_name, upload_at, last_update, status FROM tbl_user_file
WHERE user_name = ? LIMIT ?
`

type GetUserFileMeteListParams struct {
	UserName string
	Limit    int32
}

func (q *Queries) GetUserFileMeteList(ctx context.Context, arg GetUserFileMeteListParams) ([]TblUserFile, error) {
	rows, err := q.db.QueryContext(ctx, getUserFileMeteList, arg.UserName, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TblUserFile
	for rows.Next() {
		var i TblUserFile
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.FileSha1,
			&i.FileSize,
			&i.FileName,
			&i.UploadAt,
			&i.LastUpdate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
