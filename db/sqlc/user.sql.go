// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO tbl_user (
  user_name,
  user_pwd,
  email,
  phone,
  email_validated,
  phone_validated,
  signup_at,
  last_active,
  profile,
  status
) VALUES (
  ?,?,?,?,?,?,?,?,?,?
)
`

type CreateUserParams struct {
	UserName       string
	UserPwd        string
	Email          sql.NullString
	Phone          sql.NullString
	EmailValidated sql.NullBool
	PhoneValidated sql.NullBool
	SignupAt       sql.NullTime
	LastActive     sql.NullTime
	Profile        sql.NullString
	Status         int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.UserName,
		arg.UserPwd,
		arg.Email,
		arg.Phone,
		arg.EmailValidated,
		arg.PhoneValidated,
		arg.SignupAt,
		arg.LastActive,
		arg.Profile,
		arg.Status,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM tbl_user
WHERE user_name = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userName string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userName)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, user_name, user_pwd, email, phone, email_validated, phone_validated, signup_at, last_active, profile, status FROM tbl_user
WHERE user_name = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userName string) (TblUser, error) {
	row := q.db.QueryRowContext(ctx, getUser, userName)
	var i TblUser
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserPwd,
		&i.Email,
		&i.Phone,
		&i.EmailValidated,
		&i.PhoneValidated,
		&i.SignupAt,
		&i.LastActive,
		&i.Profile,
		&i.Status,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
update tbl_user 
SET email = ?
WHERE user_name = ?
`

type UpdateUserParams struct {
	Email    sql.NullString
	UserName string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Email, arg.UserName)
	return err
}
